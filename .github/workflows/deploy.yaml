name: Deploy

# Defines when this workflow will run
on:
    pull_request:
        # Only trigger on PRs targeting main branch
        branches:
            - main
        # Only run for version-named branches (v-X-X-X)
        # branches-ignore:
        #     - "!v-*-*-*"

jobs:
    # Main job that builds and deploys Docker image
    build_image:
        # Grant write permissions to repository contents for release creation
        permissions:
            contents: write
        # Use custom Blacksmith runner with ARM architecture
        runs-on: [blacksmith-8vcpu-ubuntu-2204-arm]
        name: Build Docker image
        steps:
            # Step 1: Get code from repository
            - name: Checkout repository
              uses: actions/checkout@v4

            # Step 2: Setup Node.js environment with Blacksmith's optimized setup
            - name: Setup Node.js
              uses: useblacksmith/setup-node@v5.0.4
              with:
                  node-version: "22"


            # Step 3: Extract version from package.json for tagging
            - name: Read version from package.json
              id: package-version
              run: echo "VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

            # Step 4: Check if version is a pre-release
            - name: Determine if pre-release
              id: prerelease_check
              run: |
                  VERSION=$(node -p "require('./package.json').version")
                  if [[ $VERSION == *"pre"* ]]; then
                    echo "IS_PRERELEASE=true" >> $GITHUB_OUTPUT
                  else
                    echo "IS_PRERELEASE=false" >> $GITHUB_OUTPUT
                  fi

            # Step 5: Authenticate with GitHub Container Registry
            - name: Login to GitHub Container Registry
              id: docker_login
              run: |
                  echo ${{ secrets.GHCR_LOGIN }} | docker login ghcr.io -u doras-to-admin --password-stdin

            # Step 6: Set up Docker Buildx for optimized builds
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            # Step 7: Build and push Docker image with layer caching
            - name: Build Docker image
              id: docker_build
              uses: docker/build-push-action@v5
              with:
                  context: .
                  push: true
                  tags: |
                      ghcr.io/dorasto/spotify-overlay:latest
                      ghcr.io/dorasto/spotify-overlay:v${{ steps.package-version.outputs.VERSION }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

            # Step 8: Create GitHub Release with version info
            - name: Create Release
              uses: ncipollo/release-action@v1
              with:
                  tag: v${{ steps.package-version.outputs.VERSION }}
                  name: Version ${{ steps.package-version.outputs.VERSION }}
                  generateReleaseNotes: true
                  makeLatest: true
                  draft: false
                  prerelease: ${{ steps.prerelease_check.outputs.IS_PRERELEASE }}
                  allowUpdates: true
                  body: |
                      ## Docker Image Information
                      Image: ghcr.io/dorasto/spotify-overlay:v${{ steps.package-version.outputs.VERSION }}
                      Digest: ${{ steps.docker_build.outputs.digest }}


            # Step 9: Trigger deployment in Coolify
            - name: Trigger Coolify deployment
              run: |
                  curl --request GET '${{ secrets.COOLIFY_SPOTIFY_OVERLAY_DEPLOY }}' --header 'Authorization: Bearer ${{ secrets.COOLIFY_DEPLOY_SPOTIFY_OVERLAY }}'
